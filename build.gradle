plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.runtime' version '1.12.5'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

ext {
    junitVersion = '5.9.1'
}

shadowJar {
    mergeServiceFiles()
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    implementation('com.dlsc.formsfx:formsfx-core:11.5.0') {
        exclude(group: 'org.openjfx')
    }
    // 文本编辑器组件
    implementation('org.fxmisc.richtext:richtextfx:0.11.0')
    // json解析
    implementation('com.alibaba.fastjson2:fastjson2-adapter:2.0.22')
    // 使用sqlite数据库要用到的
    implementation('org.xerial:sqlite-jdbc:3.34.0')
    implementation('org.mybatis:mybatis:3.5.10')
    implementation('org.jfxtras:jmetro:11.6.14')
    // 删除到回收站操作
    implementation('net.java.dev.jna:jna-platform:4.0.0')
    // 空判断
    implementation('org.jetbrains:annotations:20.1.0')
    // 引入工具箱
    implementation('cn.hutool:hutool-core:5.6.3')
    // 引入图标库
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1')
    // 测试框架
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    mainClass = "com.yangteng.library.Launcher"
    applicationName = 'library'
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
    }
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/icon.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'library', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'library']
        }
    }
}
